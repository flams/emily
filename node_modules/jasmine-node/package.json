{
  "name": "jasmine-node",
  "version": "1.12.0",
  "description": "DOM-less simple JavaScript BDD testing framework for Node",
  "contributors": [
    {
      "name": "Chris Moultrie",
      "email": "chris@moultrie.org"
    }
  ],
  "homepage": "https://github.com/mhevery/jasmine-node",
  "repository": {
    "type": "git",
    "url": "https://github.com/mhevery/jasmine-node.git"
  },
  "keywords": [
    "testing",
    "bdd"
  ],
  "author": {
    "name": "Misko Hevery",
    "email": "misko@hevery.com"
  },
  "maintainers": [
    {
      "name": "Martin Häger",
      "email": "martin.haeger@gmail.com"
    },
    {
      "name": "Chris Moultrie",
      "email": "chris@moultrie.org"
    }
  ],
  "licenses": [
    "MIT"
  ],
  "dependencies": {
    "coffee-script": ">=1.0.1",
    "jasmine-reporters": ">=0.2.0",
    "jasmine-growl-reporter": "~0.0.2",
    "requirejs": ">=0.27.1",
    "walkdir": ">= 0.0.1",
    "underscore": ">= 1.3.1",
    "gaze": "~0.3.2",
    "mkdirp": "~0.3.5"
  },
  "bin": {
    "jasmine-node": "bin/jasmine-node"
  },
  "preferGlobal": true,
  "main": "lib/jasmine-node",
  "scripts": {
    "test": "node lib/jasmine-node/cli.js spec"
  },
  "devDependencies": {},
  "readme": "jasmine-node\n======\n\n[![Build Status](https://secure.travis-ci.org/spaghetticode/jasmine-node.png)](http://travis-ci.org/spaghetticode/jasmine-node)\n\nThis node.js module makes the wonderful Pivotal Lab's jasmine\n(http://github.com/pivotal/jasmine) spec framework available in\nnode.js.\n\njasmine\n-------\n\nVersion `1.3.1` of Jasmine is currently included with node-jasmine.\n\nwhat's new\n----------\n*  Growl notifications with the `--growl` flag (requires Growl to be installed)\n*  Ability to test specs written in Literate Coffee-Script\n*  Teamcity Reporter reinstated.\n*  Ability to specify multiple files to test via list in command line\n*  Ability to suppress stack trace with `--noStack`\n*  Async tests now run in the expected context instead of the global one\n*  `--config` flag that allows you to assign variables to process.env\n*  Terminal Reporters are now available in the Jasmine Object #184\n*  Done is now available in all timeout specs #199\n*  `afterEach` is available in requirejs #179\n*  Editors that replace instead of changing files should work with autotest #198\n*  Jasmine Mock Clock now works!\n*  Autotest now works!\n*  Using the latest Jasmine!\n*  Verbose mode tabs `describe` blocks much more accurately!\n*  `--coffee` now allows specs written in Literate CoffeeScript (`.litcoffee`)\n\ninstall\n------\n\nTo install the latest official version, use NPM:\n\n```sh\nnpm install jasmine-node -g\n```\n\nTo install the latest _bleeding edge_ version, clone this repository and check\nout the `beta` branch.\n\nusage\n------\n\nWrite the specifications for your code in `*.js` and `*.coffee` files in the `spec/` directory.\nYou can use sub-directories to better organise your specs. In the specs use `describe()`, `it()` etc. exactly \nas you would in client-side jasmine specs.\n\n**Note**: your specification files must be named as `*spec.js`, `*spec.coffee` or `*spec.litcoffee`,\nwhich matches the regular expression `/spec\\.(js|coffee|litcoffee)$/i`;\notherwise jasmine-node won't find them!\nFor example, `sampleSpecs.js` is wrong, `sampleSpec.js` is right.\n\nIf you have installed the npm package, you can run it with:\n\n```sh\njasmine-node spec/\n```\n\nIf you aren't using npm, you should add `pwd`/lib to the `$NODE_PATH`\nenvironment variable, then run:\n\n```sh\nnode lib/jasmine-node/cli.js\n```\n\n\nYou can supply the following arguments:\n\n  * `--autotest`, provides automatic execution of specs after each change\n  * `--watch`, when used with `--autotest`, paths after `--watch` will be\nwatched for changes, allowing to watch for changes outside of specs directory\n  * `--coffee`, allow execution of `.coffee` and `.litcoffee` specs\n  * `--color`, indicates spec output should uses color to\nindicates passing (green) or failing (red) specs\n  * `--noColor`, do not use color in the output\n  * `-m, --match REGEXP`, match only specs comtaining \"REGEXPspec\"\n  * `--matchall`, relax requirement of \"spec\" in spec file names\n  * `--verbose`, verbose output as the specs are run\n  * `--junitreport`, export tests results as junitreport xml format\n  * `--output FOLDER`, defines the output folder for junitreport files\n  * `--teamcity`, converts all console output to teamcity custom test runner commands. (Normally auto detected.)\n  * `--growl`, display test run summary in a growl notification (in addition to other outputs)\n  * `--runWithRequireJs`, loads all specs using requirejs instead of node's native require method\n  * `--requireJsSetup`, file run before specs to include and configure RequireJS\n  * `--test-dir`, the absolute root directory path where tests are located\n  * `--nohelpers`, does not load helpers\n  * `--forceexit`, force exit once tests complete\n  * `--captureExceptions`, listen to global exceptions, report them and exit (interferes with Domains in NodeJs, so do not use if using Domains as well\n  * `--config NAME VALUE`, set a global variable in `process.env`\n  * `--noStack`, suppress the stack trace generated from a test failure\n\nIndividual files to test can be added as bare arguments to the end of the args.\n\nExample:\n\n```bash\njasmine-node --coffee spec/AsyncSpec.coffee spec/CoffeeSpec.coffee spec/SampleSpec.js\n```\n\nasync tests\n-----------\n\njasmine-node includes an alternate syntax for writing asynchronous tests. Accepting\na done callback in the specification will trigger jasmine-node to run the test\nasynchronously waiting until the `done()` callback is called.\n\n```javascript\nvar request = require('request');\n\nit(\"should respond with hello world\", function(done) {\n  request(\"http://localhost:3000/hello\", function(error, response, body){\n    expect(body).toEqual(\"hello world\");\n    done();\n  });\n});\n```\n\nAn asynchronous test will fail after `5000` ms if `done()` is not called. This timeout\ncan be changed by setting `jasmine.getEnv().defaultTimeoutInterval` or by passing a timeout\ninterval in the specification.\n\n```javascript\nvar request = require('request');\n\nit(\"should respond with hello world\", function(done) {\n  request(\"http://localhost:3000/hello\", function(error, response, body){\n    done();\n  }, 250);  // timeout after 250 ms\n});\n```\n\nor\n\n```javascript\nvar request = require('request');\n\njasmine.getEnv().defaultTimeoutInterval = 500;\n\nit(\"should respond with hello world\", function(done) {\n  request(\"http://localhost:3000/hello\", function(error, response, body){\n    done();\n  });  // timeout after 500 ms\n});\n```\n\nCheckout [`spec/SampleSpecs.js`](https://github.com/mhevery/jasmine-node/blob/master/spec/SampleSpecs.js) to see how to use it.\n\n\nrequirejs\n---------\n\nThere is a sample project in `/spec-requirejs`. It is comprised of:\n\n1.  `requirejs-setup.js`, this pulls in our wrapper template (next)\n1.  `requirejs-wrapper-template`, this builds up requirejs settings\n1.  `requirejs.sut.js`, this is a __SU__bject To __T__est, something required by requirejs\n1.  `requirejs.spec.js`, the actual jasmine spec for testing\n\nTo run it:\n\n```sh\nnode lib/jasmine-node/cli.js --runWithRequireJs --requireJsSetup ./spec-requirejs/requirejs-setup.js ./spec-requirejs/\n```\n\nexceptions\n----------\n\nOften you'll want to capture an uncaught exception and log it to the console,\nthis is accomplished by using the `--captureExceptions` flag. Exceptions will\nbe reported to the console, but jasmine-node will attempt to recover and\ncontinue. It was decided to not change the current functionality until `2.0`. So,\nuntil then, jasmine-node will still return `0` and continue on without this flag.\n\n### Scenario ###\n\nYou require a module, but it doesn't exist, ie `require('Q')` instead of\n`require('q')`. Jasmine-Node reports the error to the console, but carries on\nand returns `0`. This messes up Travis-CI because you need it to return a\nnon-zero status while doing CI tests.\n\n### Mitigation ###\n\nBefore `--captureExceptions`\n\n```sh\n> jasmine-node --coffee spec\n> echo $status\n0\n```\n\nRun jasmine node with the `--captureExceptions` flag.\n\n```sh\n> jasmine-node --coffee --captureExceptions spec\n> echo $status\n1\n```\n\n\ngrowl notifications\n-------------------\n\nJasmine node can display [Growl](http://growl.info) notifications of test\nrun summaries in addition to other reports.\nGrowl must be installed separately, see [node-growl](https://github.com/visionmedia/node-growl)\nfor platform-specific instructions. Pass the `--growl` flag to enable the notifications.\n\n\ndevelopment\n-----------\n\nInstall the dependent packages by running:\n\n```sh\nnpm install\n```\n\nRun the specs before you send your pull request:\n\n```sh\nspecs.sh\n```\n\n__Note:__ Some tests are designed to fail in the specs.sh. After each of the\nindividual runs completes, there is a line that lists what the expected\nPass/Assert/Fail count should be. If you add/remove/edit tests, please be sure\nto update this with your PR.\n\n\nchangelog\n---------\n\n*  _1.12.0_\n  *  Changed `util.print` to `stdout.write` (thanks to [nrstott](https://github.com/nrstott))\n  *  Don’t affect line numbers with --requireJsSetup (thanks to [daviddaurelio](https://github.com/davidaurelio))\n  *  Catch errors when loading helpers (thanks to [pimterry](https://github.com/pimterry))\n  *  Keep autotesting until all tests have passed (thanks to [notclive](https://github.com/notclive))\n*  _1.11.0 - Added Growl notification option `--growl` (thanks to\n   [AlphaHydrae](https://github.com/AlphaHydrae))_\n*  _1.10.2 - Restored stack filter which was accidentally removed (thanks to\n   [kevinsawicki](https://github.com/kevinsawicki))_\n*  _1.10.1 - `beforeEach` and `afterEach` now properly handle the async-timeout function_\n*  _1.10.0 - Skipped tests now show in the terminal reporter's output (thanks\n   to [kevinsawicki](https://github.com/kevinsawicki))_\n*  _1.9.1 - Timeout now consistent between Async and Non-Async Calls (thanks to\n   [codemnky](https://github.com/codemnky))_\n*  _1.9.0 - Now re-throwing the file-not-found error, added info to README.md,\n   printing version with `--version`_\n*  _1.8.1 - Fixed silent failure due to invalid REGEX (thanks to\n   [pimterry](https://github.com/pimterry))_\n*  _1.8.0 - Fixed bug in autotest with multiple paths and added `--watch` feature\n    (thanks to [davegb3](https://github.com/davegb3))_\n*  _1.7.1 - Removed unneeded fs dependency (thanks to\n   [kevinsawicki](https://github.com/kevinsawicki)) Fixed broken fs call in\n   node `0.6` (thanks to [abe33](https://github.com/abe33))_\n*  _1.7.0 - Literate Coffee-Script now testable (thanks to [magicmoose](https://github.com/magicmoose))_\n*  _1.6.0 - Teamcity Reporter Reinstated (thanks to [bhcleek](https://github.com/bhcleek))_\n*  _1.5.1 - Missing files and require exceptions will now report instead of failing silently_\n*  _1.5.0 - Now takes multiple files for execution. (thanks to [abe33](https://github.com/abe33))_\n*  _1.4.0 - Optional flag to suppress stack trace on test failure (thanks to [Lastalas](https://github.com/Lastalas))_\n*  _1.3.1 - Fixed context for async tests (thanks to [omryn](https://github.com/omryn))_\n*  _1.3.0 - Added `--config` flag for changeable testing environments_\n*  _1.2.3 - Fixed #179, #184, #198, #199. Fixes autotest, afterEach in requirejs, terminal reporter is in jasmine object, done function missing in async tests_\n*  _1.2.2 - Revert Exception Capturing to avoid Breaking Domain Tests_\n*  _1.2.1 - Emergency fix for path reference missing_\n*  _1.2.0 - Fixed #149, #152, #171, #181, #195. `--autotest` now works as expected, jasmine clock now responds to the fake ticking as requested, and removed the path.exists warning_\n*  _1.1.1 - Fixed #173, #169 (Blocks were not indented in verbose properly, added more documentation to address #180_\n*  _1.1.0 - Updated Jasmine to `1.3.1`, fixed fs missing, catching uncaught exceptions, other fixes_\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mhevery/jasmine-node/issues"
  },
  "_id": "jasmine-node@1.12.0",
  "dist": {
    "shasum": "7aeb4eb6fca801149230ad5573cd642a647b4c02"
  },
  "_from": "jasmine-node@",
  "_resolved": "https://registry.npmjs.org/jasmine-node/-/jasmine-node-1.12.0.tgz"
}
